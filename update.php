<?php
require_once __DIR__ . '/db.php';
require_login();

// Check if user is admin or has update permission
// For simplicity, assume logged in user can update

$message = '';
$success = false;

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['update'])) {
    $output = [];
    $successMsg = '';
    // If this directory is a git working copy, do a git pull. Otherwise fall back to downloading the archive.
    if (is_dir(__DIR__ . '/.git')) {
        $cmd = 'git -C ' . escapeshellarg(__DIR__) . ' pull origin main 2>&1';
        $ret = 0;
        exec($cmd, $output, $ret);
        if ($ret === 0) {
            $successMsg = 'git pull –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.';
        } else {
            $message = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ git: ' . implode("\n", $output);
        }
    } else {
        // Not a git repo ‚Äî download ZIP from GitHub and unpack
        $repoUrl = 'https://github.com/oleksandr/DiscusScan/archive/refs/heads/main.zip';
        $tmpZip = sys_get_temp_dir() . '/discuscan_update_' . bin2hex(random_bytes(6)) . '.zip';
        $downloaded = false;
        // Try curl then file_get_contents
        if (function_exists('curl_version')) {
            $ch = curl_init($repoUrl);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);
            $data = curl_exec($ch);
            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            curl_close($ch);
            if ($data !== false && $httpCode >= 200 && $httpCode < 400) {
                file_put_contents($tmpZip, $data);
                $downloaded = true;
            } else {
                $output[] = 'ZIP download failed, HTTP code: ' . ($httpCode ?? 'unknown');
            }
        } else {
            $data = @file_get_contents($repoUrl);
            if ($data !== false) {
                file_put_contents($tmpZip, $data);
                $downloaded = true;
            } else {
                $output[] = 'file_get_contents failed to download ZIP. enable allow_url_fopen or install curl.';
            }
        }

        $copied = false;
        if ($downloaded) {
            if (!class_exists('ZipArchive')) {
                $output[] = 'ZipArchive –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PHP, —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.';
            } else {
                $za = new ZipArchive();
                if ($za->open($tmpZip) === true) {
                    $extractDir = sys_get_temp_dir() . '/discuscan_unpack_' . bin2hex(random_bytes(6));
                    mkdir($extractDir, 0755, true);
                    $za->extractTo($extractDir);
                    $za->close();

                    // find extracted root
                    $dirs = glob($extractDir . '/*', GLOB_ONLYDIR);
                    $srcRoot = $dirs[0] ?? $extractDir;

                    $it = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($srcRoot, FilesystemIterator::SKIP_DOTS), RecursiveIteratorIterator::SELF_FIRST);
                    foreach ($it as $item) {
                        $rel = substr($item->getPathname(), strlen($srcRoot) + 1);
                        if ($rel === '' || $rel === false) continue;
                        // skip .env, installer and .git
                        if (strpos($rel, '.env') === 0) continue;
                        if (strpos($rel, 'installer.php') === 0) continue;
                        if (strpos($rel, '.git') === 0) continue;

                        $target = __DIR__ . '/' . $rel;
                        if ($item->isDir()) {
                            if (!is_dir($target)) @mkdir($target, 0755, true);
                        } else {
                            @copy($item->getPathname(), $target);
                            $copied = true;
                        }
                    }

                    // cleanup
                    @unlink($tmpZip);
                    $ri = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($extractDir, FilesystemIterator::SKIP_DOTS), RecursiveIteratorIterator::CHILD_FIRST);
                    foreach ($ri as $f) { if ($f->isFile()) @unlink($f->getPathname()); else @rmdir($f->getPathname()); }
                    @rmdir($extractDir);

                    if ($copied) $successMsg = '–ê—Ä—Ö–∏–≤ —Å–∫–∞—á–∞–Ω –∏ —Ñ–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.'; else $output[] = '–ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω, –Ω–æ —Ñ–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã.';
                } else {
                    $output[] = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å ZIP-–∞—Ä—Ö–∏–≤.';
                }
            }
        }
    }

    // If we have a success message or no fatal errors, try to run migrations (install_schema via pdo())
    if ($successMsg || empty($message)) {
        try {
            include_once __DIR__ . '/db.php';
            $pdo = pdo(); // will create tables and ensure defaults
            $message = ($successMsg ? $successMsg . ' ' : '') . '–ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.';
        } catch (Throwable $e) {
            $message = ($successMsg ? $successMsg . ' ' : '') . '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π: ' . $e->getMessage();
        }
    }
}

// Load current version
include_once __DIR__ . '/version.php';
$localVersion = defined('APP_VERSION') ? APP_VERSION : '0.0.0';
?>
<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8">
  <title>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Äî DiscusScan</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
<header class="topbar">
  <div class="brand">üîé –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</div>
  <nav>
    <a href="index.php">–î–∞—à–±–æ—Ä–¥</a>
    <a href="sources.php">–î–æ–º–µ–Ω—ã</a>
    <a href="settings.php">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</a>
    <a href="auth.php?logout=1">–í—ã—Ö–æ–¥</a>
  </nav>
</header>

<main class="container">
  <h1>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h1>
  <p>–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: v<?= htmlspecialchars($localVersion) ?></p>

  <?php if ($message): ?>
    <div class="alert <?= $success ? 'success' : 'error' ?>">
      <?= nl2br(htmlspecialchars($message)) ?>
    </div>
  <?php endif; ?>

  <form method="post">
    <button type="submit" name="update" class="btn primary">–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (git pull)</button>
  </form>

  <p><small>–≠—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç git pull –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –∑–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ git –∏ –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.</small></p>

  <section style="margin-top:18px;">
    <details class="card glass">
      <summary class="card-title">–°–æ–≤–µ—Ç—ã</summary>
      <div class="content">
        <ul>
          <li>–ï—Å–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ git, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—Ä—Ö–∏–≤ —Å GitHub –∏ —Ä–∞—Å–ø–∞–∫—É–π—Ç–µ –µ–≥–æ –≤ –ø–∞–ø–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.</li>
          <li>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</li>
          <li>–ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã –≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞.</li>
        </ul>
      </div>
    </details>
  </section>

</main>
<?php include 'footer.php'; ?>
</body>
</html>